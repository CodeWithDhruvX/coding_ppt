[
    {
      "title": "Golang में Arithmetic Operators",
      "content": "Arithmetic operators का उपयोग गणितीय गणनाओं के लिए किया जाता है। जब भी आपको जोड़ना, घटाना, गुणा या भाग करना हो, तो इन्हीं ऑपरेटर्स का इस्तेमाल किया जाता है। इसके अलावा, यह हमें शेषफल और घातांक जैसी गणनाएँ करने की सुविधा भी देते हैं। ये ऑपरेटर्स प्रोग्रामिंग में सबसे ज़्यादा इस्तेमाल किए जाने वाले ऑपरेटर्स में से एक हैं।",
      "slide_type": "text"
    },
    {
      "title": "Golang में Assignment Operators",
      "content": "जब हमें किसी variable में value assign करनी होती है, तब assignment operators का उपयोग किया जाता है। ये operators न केवल एक सामान्य मान (value) को variable में स्टोर करने के लिए होते हैं, बल्कि कई मामलों में यह value को modify करने का काम भी करते हैं। जैसे, किसी संख्या को बढ़ाना या घटाना, उसके अंदर कोई नया गणितीय ऑपरेशन करना आदि। ये ऑपरेटर्स कोड को छोटा और साफ-सुथरा बनाते हैं।",
      "slide_type": "text"
    },
    {
      "title": "Golang में Comparison Operators",
      "content": "Comparison operators का उपयोग तब किया जाता है जब हमें दो मानों (values) की तुलना करनी होती है। ये ऑपरेटर्स हमें यह बताने में मदद करते हैं कि दो मान आपस में समान हैं या नहीं, कोई एक दूसरे से बड़ा या छोटा है या नहीं। इन ऑपरेटर्स का उपयोग शर्तों (conditions) के साथ किया जाता है, जिनका परिणाम true या false होता है। किसी भी निर्णय-निर्माण (decision-making) में यह ऑपरेटर्स बहुत महत्वपूर्ण भूमिका निभाते हैं।",
      "slide_type": "text"
    },
    {
      "title": "Golang में Logical Operators",
      "content": "Logical operators का उपयोग तब किया जाता है जब हमें एक से अधिक शर्तों को जोड़कर एक जटिल निर्णय लेना होता है। उदाहरण के लिए, यदि कोई शर्त सत्य (true) है और दूसरी भी सत्य है, तभी कुछ होना चाहिए, या यदि केवल एक शर्त सत्य है तो कुछ और होना चाहिए। यह ऑपरेटर्स Boolean मान (true या false) के साथ काम करते हैं और निर्णय निर्माण की प्रक्रिया को प्रभावी बनाते हैं।",
      "slide_type": "text"
    },
    {
      "title": "Golang में Bitwise Operators",
      "content": "Bitwise operators का उपयोग तब किया जाता है जब हमें बाइनरी स्तर (binary level) पर कार्य करना होता है। ये ऑपरेटर्स किसी संख्या को बाइनरी रूप में बदलकर, उन पर बाइनरी गणनाएँ करने की सुविधा देते हैं। यह ऑपरेटर्स उन्नत प्रोग्रामिंग में अधिक उपयोग किए जाते हैं, जैसे कि एन्क्रिप्शन, डेटा संपीड़न (compression) और कम-स्तरीय (low-level) सिस्टम ऑपरेशन में।",
      "slide_type": "text"
    },
    {
      "title": "Golang में Miscellaneous Operators",
      "content": "इसके अलावा, Golang में कुछ और भी ऑपरेटर्स होते हैं जो विभिन्न उद्देश्यों के लिए उपयोग किए जाते हैं। ये ऑपरेटर्स कुछ विशेष परिस्थितियों में मदद करते हैं और कोडिंग को अधिक प्रभावी बनाते हैं।",
      "slide_type": "text"
    },
    {
      "title": "Golang में If-Else Control Structure",
      "content": "if-else का उपयोग निर्णय लेने के लिए किया जाता है। जब कोई शर्त सही होती है, तब if ब्लॉक का कोड निष्पादित होता है, और यदि शर्त गलत होती है, तब else ब्लॉक का कोड निष्पादित होता है। यह प्रोग्राम को स्मार्ट तरीके से निर्णय लेने में मदद करता है।",
      "slide_type": "text"
    },
    {
      "title": "Golang में If-Else Execution Flow",
      "content": "इसका फ्लो इस प्रकार होता है:\n- यदि कोई शर्त पूरी होती है, तो if ब्लॉक चलेगा।\n- यदि पहली शर्त गलत हो जाती है, तो दूसरी शर्त चेक होगी।\n- अगर कोई भी शर्त पूरी नहीं होती, तो else ब्लॉक चलेगा।",
      "slide_type": "text"
    },
    {
      "title": "Golang में Nested If Statements",
      "content": "कई बार हमें एक if के अंदर दूसरा if लिखना पड़ता है, जिसे nested if कहा जाता है। यह तब उपयोगी होता है जब हमें जटिल निर्णय लेने होते हैं।",
      "slide_type": "text"
    },
    {
      "title": "Golang में If Statement में Short Variable Declaration",
      "content": "Golang में if स्टेटमेंट के अंदर ही वेरिएबल घोषित करने की सुविधा होती है। इससे कोड छोटा और स्पष्ट बनता है, और यह वेरिएबल केवल if ब्लॉक के अंदर ही रहता है।",
      "slide_type": "text"
    },
    {
      "title": "Golang में For Loop",
      "content": "Golang में for loop का उपयोग किसी प्रक्रिया को बार-बार दोहराने के लिए किया जाता है। पारंपरिक रूप में यह तीन हिस्सों में बंटा होता है:\n1. Initialization – यहाँ वेरिएबल की शुरुआती मान सेट की जाती है।\n2. Condition – यहाँ यह जाँचा जाता है कि लूप जारी रहेगा या नहीं।\n3. Increment/Decrement – हर iteration के बाद वेरिएबल की वैल्यू बदली जाती है।",
      "slide_type": "text"
    },
    {
      "title": "Golang में While Loop जैसा For Loop",
      "content": "Golang में while लूप नहीं होता, लेकिन for लूप को while की तरह लिखा जा सकता है, जहाँ केवल शर्त दी जाती है और इनिशियलाइज़ेशन बाहर किया जाता है।",
      "slide_type": "text"
    },
    {
      "title": "Golang में Infinite Loop",
      "content": "अगर for में कोई शर्त नहीं दी जाए, तो वह अनंत (infinite) लूप बन जाता है, जो कभी समाप्त नहीं होता।",
      "slide_type": "text"
    },
    {
      "title": "Golang में Loop Over Slices और Maps",
      "content": "जब हमें किसी slice या map के प्रत्येक तत्व पर लूप चलाना हो, तब हम range का उपयोग करते हैं। यह विशेष रूप से संग्रहणीय (iterable) डेटा संरचनाओं के लिए उपयोगी होता है।",
      "slide_type": "text"
    },
    {
      "title": "Golang में Switch-Case",
      "content": "अगर हमें कई अलग-अलग संभावनाओं को जाँचना हो, तो switch-case एक बेहतर विकल्प है। यह if-else से तेज़ और पढ़ने में आसान होता है।",
      "slide_type": "text"
    },
    {
      "title": "Golang में Switch Without Condition",
      "content": "Golang में switch को बिना किसी वेरिएबल के भी लिखा जा सकता है, जिससे यह कई शर्तों को साफ़-सुथरे तरीके से जाँचने में मदद करता है।",
      "slide_type": "text"
    },
    {
      "title": "Golang में Fallthrough Statement",
      "content": "सामान्यतः switch में एक case के निष्पादन के बाद नियंत्रण बाहर चला जाता है, लेकिन यदि हमें एक case के बाद अगला case भी चलाना हो, तो fallthrough का उपयोग किया जाता है।",
      "slide_type": "text"
    },
    {
      "title": "Best Practices for Control Structures in Golang",
      "content": "1. Short variable declaration – जब भी संभव हो, if-else में short declaration का उपयोग करें।\n2. Range in loops – जब भी slices या maps पर iteration करनी हो, range का उपयोग करें।\n3. Default case in switch – हमेशा switch में एक default case रखें।\n4. Break & Continue in loops – अनावश्यक infinite loops से बचने के लिए break और continue का सही उपयोग करें।\n5. Fallthrough को कम उपयोग करें।",
      "slide_type": "text"
    }
  ]
  