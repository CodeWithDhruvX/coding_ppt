[
    {
        "title": "Arithmetic Operators Example",
        "content": "package main\nimport \"fmt\"\n\nfunc main() {\n    a, b := 10, 3\n    fmt.Println(\"Addition:\", a+b) \n    fmt.Println(\"Subtraction:\", a-b) \n    fmt.Println(\"Multiplication:\", a*b) \n    fmt.Println(\"Division:\", a/b) \n    fmt.Println(\"Modulus:\", a%b) \n}"
    },
    {
        "title": "Assignment Operators Example",
        "content": "package main\nimport \"fmt\"\n\nfunc main() {\n    a := 10\n    a += 5  // a = a + 5\n    fmt.Println(\"Updated a:\", a) \n}"
    },
    {
        "title": "Comparison Operators Example",
        "content": "package main\nimport \"fmt\"\n\nfunc main() {\n    a, b := 10, 20\n    fmt.Println(\"a == b:\", a == b) \n    fmt.Println(\"a != b:\", a != b) \n    fmt.Println(\"a > b:\", a > b) \n    fmt.Println(\"a < b:\", a < b) \n}"
    },
    {
        "title": "Logical Operators Example",
        "content": "package main\nimport \"fmt\"\n\nfunc main() {\n    a, b := 15, 5\n    fmt.Println(\"AND:\", a > 10 && b < 10) \n    fmt.Println(\"OR:\", a > 20 || b < 10) \n    fmt.Println(\"NOT:\", !(a > 10)) \n}"
    },
    {
        "title": "Bitwise Operators Example",
        "content": "package main\nimport \"fmt\"\n\nfunc main() {\n    a, b := 5, 3 \n    fmt.Println(\"AND:\", a & b) \n    fmt.Println(\"OR:\", a | b) \n    fmt.Println(\"XOR:\", a ^ b) \n    fmt.Println(\"Left Shift:\", a << 1) \n    fmt.Println(\"Right Shift:\", a >> 1) \n}"
    },
    {
        "title": "Miscellaneous Operators Example",
        "content": "package main\nimport \"fmt\"\n\nfunc main() {\n    a := 10\n    p := &a  // Address of a\n    fmt.Println(\"Address of a:\", p)\n    fmt.Println(\"Value at p:\", *p)  // Dereferencing\n}"
    },
    {
        "title": "Golang If-Else - Basic Flow - Example",
        "content": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    temperature := 35\n\n    if temperature > 30 {\n        fmt.Println(\"Bahut garmi hai!\")\n    } else if temperature > 20 {\n        fmt.Println(\"Mausam normal hai.\")\n    } else {\n        fmt.Println(\"Thandi hai!\")\n    }\n}\n```"
    },
    {
        "title": "Golang If-Else - Nested If Statements - Example",
        "content": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    age := 25\n    income := 50000\n\n    if age >= 18 {\n        if income >= 40000 {\n            fmt.Println(\"Aap loan le sakte hain!\")\n        } else {\n            fmt.Println(\"Aapki income low hai, loan nahi milega.\")\n        }\n    } else {\n        fmt.Println(\"Aapki age kam hai, loan nahi milega.\")\n    }\n}\n```\nYaha pehle age check hogi, fir income check hoke final decision aayega."
    },
    {
        "title": "Golang If-Else - Short Variable Declaration in If Statement - Example",
        "content": "```go\nif num := 10; num%2 == 0 {\n    fmt.Println(\"Even number\")\n} else {\n    fmt.Println(\"Odd number\")\n}\n```\n- `num := 10` yahi pe declare kiya gaya hai.\n- `num%2 == 0` condition check hogi.\n- Yeh variable `if-else` block ke andar hi rahega, iske bahar use nahi ho sakta."
    },
    {
        "title": "Golang For Loop - Traditional For Loop - Example",
        "content": "```go\nfor i := 1; i <= 5; i++ {\n    fmt.Println(\"Step:\", i)\n}\n```"
    },
    {
        "title": "Golang For Loop - While Loop Jaisa For Loop - Example",
        "content": "```go\ni := 1\nfor i <= 5 {\n    fmt.Println(\"Counting:\", i)\n    i++\n}\n```\nJab tak `i` 5 se chhota ya barabar hai, loop chalta rahega."
    },
    {
        "title": "Golang For Loop - Infinite Loop - Example",
        "content": "```go\nfor {\n    fmt.Println(\"Ye loop hamesha chalega!\")\n}\n```\nYe loop CPU ko block kar sakta hai. Isko break statement se stop karna hoga."
    },
    {
        "title": "Golang For Loop - Infinite Loop - Break Example",
        "content": "```go\nfor {\n    fmt.Println(\"Ye loop chalega par break ho jayega!\")\n    break\n}\n```"
    },
    {
        "title": "Golang For Loop - Loop Over Slices and Maps - Example",
        "content": "```go\nnums := []int{10, 20, 30, 40}\nfor index, value := range nums {\n    fmt.Println(\"Index:\", index, \"Value:\", value)\n}\n```\n`range` automatically index aur value dono deta hai."
    },
    {
        "title": "Golang For Loop - Loop Over Slices and Maps - Value Only Example",
        "content": "```go\nfor _, value := range nums {\n    fmt.Println(\"Value:\", value)\n}\n```\nAgar sirf values chahiye to `_` use kar sakte hain."
    },
    {
        "title": "Golang Switch-Case - Basic Switch Example - Example",
        "content": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    day := \"Tuesday\"\n\n    switch day {\n    case \"Monday\":\n        fmt.Println(\"Aaj kaam ka din hai!\")\n    case \"Saturday\", \"Sunday\":\n        fmt.Println(\"Aaj weekend hai!\")\n    default:\n        fmt.Println(\"Normal working day!\")\n    }\n}\n```"
    },
    {
        "title": "Golang Switch-Case - Switch Without Condition - Example",
        "content": "```go\ntemperature := 35\n\nswitch {\ncase temperature > 30:\n    fmt.Println(\"Bahut garmi hai!\")\ncase temperature > 20:\n    fmt.Println(\"Mausam normal hai.\")\ndefault:\n    fmt.Println(\"Thandi hai!\")\n}\n```\nYaha `switch` bina kisi variable ke likha gaya hai, aur direct conditions check ho rahi hain."
    },
    {
        "title": "Golang Switch-Case - Fallthrough Statement - Example",
        "content": "```go\nnum := 2\n\nswitch num {\ncase 1:\n    fmt.Println(\"One\")\ncase 2:\n    fmt.Println(\"Two\")\n    fallthrough\ncase 3:\n    fmt.Println(\"Three\")\n}\n```\nYaha `case 2` match hone ke baad `case 3` bhi execute ho jayega."
    }
]