Alright, let’s talk about something really simple but super important in Go — constants.

So, the slide says:

“In Go, a constant is a fixed value that cannot be changed during the execution of the program.
Constants are declared using the const keyword and are evaluated at compile time.”

Let’s break this down.

Imagine you're filling out a government form — your date of birth never changes, right? Once it’s written, that’s it. In programming, a constant works the same way. It’s a value you set once, and then it stays the same throughout the program.

So when Go runs your program, it knows this value won’t change, and it can lock it in — this is what we mean by evaluated at compile time. That just means Go sets the value before your program actually starts running.

Now, why is this useful?

Let’s say you’re writing a program that calculates GST. The GST rate — like 18% — usually stays the same. So, instead of writing 18 in 10 different places, you can just declare a constant called GST_RATE. That way, your code is cleaner and safer — you won’t accidentally change it somewhere and mess up your whole calculation.

Also, using constants makes your code easier to read and maintain — especially if you’re working in a team or applying for jobs where clean code is expected.

So to sum up — constants in Go are like permanent labels. You define them once, they never change, and Go knows them right from the start.






=========================================================================

---

🎙️ **\[Script for Slide: "Syntax of Constant Declaration"]**

Okay, now let’s look at the syntax — how we actually **write** a constant in Go.

The slide shows this:

```go
const identifier type = value
```

Let’s break it down, nice and easy.

* First, we have the keyword **`const`** — this tells Go, “Hey, I’m declaring a constant here. This value should never change.”

* Next is the **identifier** — that just means the **name** you want to give your constant. Like `GST_RATE`, `PI`, or maybe `MaxUsers`.

* Then comes the **type** — like `int`, `float64`, or `string`. It tells Go what kind of data this is. So if your constant is a number, you might write `int`, or for decimal values like 3.14, you’d go with `float64`.

* And finally, the **value** — that’s the fixed value you want to assign. For example, `const PI float64 = 3.14`.

So the full line basically means:
**“Create a constant called `PI`, which is a float64, and its value is 3.14.”**

Now here’s something useful: Go is smart — if you skip the type, it can usually figure it out from the value. But for beginners, I recommend **including the type** in the beginning — it makes your code clearer and helps avoid confusion.

In real-world coding, this syntax is super helpful when you want to **define rules** that don’t change. Like setting a fixed discount rate in an e-commerce app or the maximum number of login attempts in a security system.

So yeah — simple, clean, and really useful once you get used to it.

---

===========================================================


Alright, let’s take a quick look at a simple constant example in Go.

Here’s the code:

go
Copy
Edit
const Pi float64 = 3.14159
fmt.Println(Pi) // Output: 3.14159
Let’s understand what’s happening here, step by step.

First line:

const Pi float64 = 3.14159

We’re declaring a constant here using the keyword const.
That means this value — 3.14159 — cannot be changed later in the program.

We’ve named it Pi, just like the mathematical constant you might’ve seen in school — used in formulas for circles and areas.

The type float64 tells Go that this is a decimal number — not a whole number like 2 or 5.

So this line is basically saying:
“Hey Go, create a constant called Pi, which is a decimal, and set its value to 3.14159.”

Once it’s set, it stays fixed throughout the program.

Next line:

fmt.Println(Pi)

This just prints the value of Pi to the screen.
So if you run this code, the output will be:

3.14159

Now, why is this important?

Imagine you’re working on a real project — maybe something with geometry or graphics — and you need the value of Pi in 10 different places. Instead of typing 3.14159 again and again, you just use the constant Pi.
It keeps your code clean, and if the value ever needs to change, you just update it in one place.

Also, because it’s a constant, there’s no risk of someone accidentally modifying it somewhere else in the code. That’s a big deal when you're working in a team or maintaining code long-term.

So even though this example is small, the idea behind it is something you’ll use a lot in real-world coding.


Alright, let’s take a quick look at a simple constant example in Go.

Here’s the code:

go
Copy
Edit
const Pi float64 = 3.14159
fmt.Println(Pi) // Output: 3.14159
Let’s understand what’s happening here, step by step.

First line:

const Pi float64 = 3.14159

We’re declaring a constant here using the keyword const.
That means this value — 3.14159 — cannot be changed later in the program.

We’ve named it Pi, just like the mathematical constant you might’ve seen in school — used in formulas for circles and areas.

The type float64 tells Go that this is a decimal number — not a whole number like 2 or 5.

So this line is basically saying:
“Hey Go, create a constant called Pi, which is a decimal, and set its value to 3.14159.”

Once it’s set, it stays fixed throughout the program.

Next line:

fmt.Println(Pi)

This just prints the value of Pi to the screen.
So if you run this code, the output will be:

3.14159

Now, why is this important?

Imagine you’re working on a real project — maybe something with geometry or graphics — and you need the value of Pi in 10 different places. Instead of typing 3.14159 again and again, you just use the constant Pi.
It keeps your code clean, and if the value ever needs to change, you just update it in one place.

Also, because it’s a constant, there’s no risk of someone accidentally modifying it somewhere else in the code. That’s a big deal when you're working in a team or maintaining code long-term.

So even though this example is small, the idea behind it is something you’ll use a lot in real-world coding.




============================================

Okay, so now let’s talk about something really cool in Go — implicit typing for constants.

The slide says:

Go allows omission of the type if the type can be inferred.

Let’s look at this example:

go
Copy
Edit
const Pi = 3.14159
fmt.Printf("%T", Pi) // Output: float64
Let’s go line by line.

First line:

const Pi = 3.14159

Here, we’re creating a constant just like before, but we didn’t mention the type — no float64, nothing.

So how does Go know what type it is?

Well, this is where Go is smart.
It looks at the value — 3.14159 — and says, “Hmm… this looks like a decimal number, so I’ll treat it as a float64.”

This is called type inference. Go figures out the type on its own.

So you can skip writing the type, and Go will still understand what you mean — as long as the value makes it obvious.

Second line:

fmt.Printf("%T", Pi)

This line is just printing the type of the constant Pi.

%T is a format verb in Go that shows the data type.

So, when this line runs, it prints:

float64

That’s Go confirming: “Yes, I guessed the type correctly!”

Now, here’s why this matters.

When you’re writing short, simple code — maybe for practice or quick tools — skipping the type makes your code cleaner and easier to read.

But in professional or team projects, sometimes it’s better to include the type explicitly, especially if it improves clarity. So just use your judgment.

And one more thing — this works only when Go can clearly guess the type. If it’s confusing, Go will give you an error. So keep it simple when using implicit typing.

So yeah, implicit typing makes life easier — and it keeps your code neat when used properly.



========================================


Alright! So now let’s see how we can declare multiple constants together in Go.

Here’s what the slide shows:

go
Copy
Edit
const (
  A = 1
  B = 2
  C = 3
)
Let’s break it down.

Instead of writing const again and again like this:

go
Copy
Edit
const A = 1  
const B = 2  
const C = 3
Go gives us a cleaner way — we can group constants into a block using parentheses.

So we write const just once, and then open the bracket.

Inside that block, we list all our constants one by one — here we’ve got A, B, and C, with values 1, 2, and 3.

This looks neater and is especially useful when you’re defining a bunch of related constants — for example, error codes, user roles, days of the week, whatever.

Let me give you a quick real-world idea.

Imagine you're working on an app that deals with order statuses:
Pending = 0, Approved = 1, Cancelled = 2.

Instead of scattering them all over the place, you can group them using a constant block — that makes the code organized and easier to read, especially when someone else joins the team later.

Also, fewer chances of making mistakes — you can see all the values in one place.




==============================================




Alright, so now we’ve got a nice little table that shows us the different ways to declare constants in Go.

Let’s go through each one step by step — super simple.

🔹 First Row – Form: Single
Syntax: const name = value

This is the most basic way. You just write const, give your variable a name, and assign a value.

Think of something like:

const speed = 60

This is useful when you’re declaring just one constant and don’t want to overthink it. Very straightforward.

🔹 Second Row – Form: Typed
Syntax: const name type = value

Here, you’re doing the same thing, but this time you’re also telling Go what type the value is.

For example:

const temperature float64 = 36.6

This can help avoid confusion when your constant might look a bit ambiguous — like when you’re working with decimals, or planning for strict type checks in your code.

🔹 Third Row – Form: Grouped
Syntax:
const ( name1 = value1; name2 = value2 )

Now this one is for when you want to define multiple constants together — nice and clean.

So instead of writing const again and again, you group them in one block.
This is great for keeping things organized — like listing days of the week, status codes, or anything that’s part of a category.

And remember — Go lets you skip the semicolons too, so it can look even neater.



==========================================



Now let’s talk about something very basic, but super important — the difference between constants and variables.

Whether you're coding your first Go program or sitting in a job interview, someone’s definitely going to ask this — “What’s the difference between a constant and a variable?”

Let’s walk through this table and understand it one row at a time.

🔹 First aspect — Mutability
Here’s the main difference:
Constants are immutable — that means once you give them a value, you cannot change it later. It’s fixed.

Think of it like your Aadhaar number — once assigned, it never changes.

On the other hand, variables are mutable, which means you can change their value anytime in your program.

Like your bank account balance — it keeps updating.

🔹 Second aspect — Declaration
Constants are declared using the const keyword.
So the moment you see const, your brain should say — “Okay, this is fixed, unchangeable.”

Variables, on the other hand, can be declared in two ways — using var or the shorthand :=.

That shorthand is very popular in Go, especially when you want to write less code and still be clear.

🔹 Third aspect — Evaluation Time
This one’s a little technical, but very useful to know.

Constants are evaluated at compile time. That means when your program is getting converted to machine code, the value is already locked in.

It’s like printing a price on a product before it hits the shelf — fixed, done, no changes.

But variables are evaluated at runtime, which means the value can be decided when the program is running.

That’s great for anything dynamic — like user input, API responses, or changing scores in a game.




=================================================
Let’s talk about a very practical topic — when exactly should you use constants in your Go programs?

Now, a lot of beginners just use variables everywhere. But constants actually help you write better, cleaner code — especially when you're working on larger projects or with a team.


🔹 First — when the value never changes.
This one’s simple. If you have a value that stays the same no matter what, that’s a perfect use case for a constant.

Think about something like Pi — 3.14159. It’s always the same. Or maybe a fixed tax rate in your app — like 18%.

Even things like HTTP status codes, like 404 or 200 — they never change. So instead of typing numbers everywhere, just make them constants.

🔹 Second — to improve readability and maintainability.
Now, imagine you're working on a real-world project — maybe with a team. If you’ve written const TaxRate = 0.18, anyone reading your code immediately understands what that number is about.

Compare that to just writing 0.18 directly in the middle of a calculation — it’s confusing, right?

Constants make your code self-explanatory. And if that value ever changes — say, the tax rate changes to 20% — you only need to update it in one place.


