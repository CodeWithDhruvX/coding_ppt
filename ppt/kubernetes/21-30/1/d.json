[
    {
      "title": "What is a ReplicaSet?",
      "content": "A **ReplicaSet** in Kubernetes is a controller that ensures a specified number of pod replicas are running at any given time.\n\nIt acts as a self-healing mechanism that monitors the state of pods and maintains the desired state, even in the case of failure or deletion.\n\nFor example, if you define 3 replicas and one pod crashes, the ReplicaSet will spin up a new one to maintain the count.",
      "slide_type": "text"
    },
    {
      "title": "Key Role of ReplicaSet",
      "content": "- Ensures **desired number of pods** are running at all times.\n- Automatically **replaces failed or terminated pods** without manual intervention.\n- Can be used directly, but more commonly used **as part of a Deployment**.\n\nThink of it as a guardian that watches over your application pods and ensures theyâ€™re always available.",
      "slide_type": "text"
    },
    {
      "title": "Basic ReplicaSet YAML Example",
      "content": "```yaml\napiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: my-replicaset\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp-container\n        image: nginx\n```",
      "slide_type": "code"
    },
    {
      "title": "Components of a ReplicaSet",
      "content": [
        { "Component": "replicas", "Description": "Defines the number of pod copies to maintain" },
        { "Component": "selector", "Description": "Matches pods with specific labels" },
        { "Component": "template", "Description": "Template to create new pods if needed" },
        { "Component": "metadata", "Description": "Names and labels the ReplicaSet" }
      ],
      "slide_type": "table"
    },
    {
      "title": "How ReplicaSet Works",
      "content": "- Monitors pods based on the labels defined in the selector.\n- Compares the current number of running pods to the `replicas` value.\n- Creates new pods if some are missing, or deletes extras if too many are running.\n\nFor instance, if you set `replicas: 3` and 2 pods crash, ReplicaSet will automatically recreate them to maintain the count.\n\nðŸ”„ **It ensures high availability without user intervention.**",
      "slide_type": "text"
    },
    {
      "title": "ReplicaSet vs Deployment",
      "content": [
        { "Feature": "ReplicaSet", "Deployment": "Yes", "ReplicaSet Only": "Yes" },
        { "Feature": "Manages Pods", "Deployment": "Yes", "ReplicaSet Only": "Yes" },
        { "Feature": "Supports Rolling Updates", "Deployment": "Yes", "ReplicaSet Only": "No" },
        { "Feature": "Recommended for Use", "Deployment": "Yes", "ReplicaSet Only": "No (used by Deployment internally)" }
      ],
      "slide_type": "table"
    },
    {
      "title": "Use Cases for ReplicaSet",
      "content": "- Ideal when you want simple pod management without versioning or rolling updates.\n- Suitable for static environments where updates are rare or manually handled.\n- Commonly **used indirectly** via Deployments, which provide more control and flexibility.\n\nTip: While you can define a ReplicaSet directly, itâ€™s usually better to use a Deployment unless you have a very specific reason not to.",
      "slide_type": "text"
    },
    {
      "title": "Quick Challenge: Test Your Understanding",
      "content": "1. **What does a ReplicaSet do when a pod fails?**\n2. **Which field in the ReplicaSet YAML matches pods?**\n3. **Can you use ReplicaSet for rolling updates?** Why or why not?\n4. **What's the typical way developers use ReplicaSets today?**",
      "slide_type": "text"
    },
    {
      "title": "Solutions: Quick Challenge",
      "content": "```markdown\n1. It automatically creates a new pod to replace the failed one.\n\n2. The `selector.matchLabels` field is used to match the pods managed by the ReplicaSet.\n\n3. No, ReplicaSets do not support rolling updates directly. For rolling updates, you should use a Deployment which manages a ReplicaSet internally.\n\n4. Developers usually use Deployments, which manage ReplicaSets behind the scenes, to simplify updates and version control.\n```",
      "slide_type": "code"
    }
  ]
  