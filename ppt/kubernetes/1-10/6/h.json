[
  {
    "title": "Kubernetes Namespaces का परिचय",
    "content": "### क्या है Namespace?\n- Kubernetes में `Namespace` एक virtual cluster है जो एक ही physical cluster के अंदर isolated environments बनाने की सुविधा देता है।\n- इसका उपयोग multi-user और multi-team environments में resource को logically अलग करने के लिए किया जाता है।\n- Example: `dev`, `staging`, और `production` जैसे अलग-अलग environments एक ही cluster में हो सकते हैं।\n- `kubectl get namespaces` command से आप सभी available namespaces की list देख सकते हैं।",
    "slide_type": "text"
  },
  {
    "title": "Namespace बनाने का Code",
    "content": "```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: dev-environment\n```\n### Command:\n```bash\nkubectl apply -f namespace.yaml\n```\n- यह YAML फ़ाइल एक नया `Namespace` बनाती है जिसका नाम `dev-environment` है।\n- इसे create करने के लिए आप `kubectl apply` command का उपयोग करते हैं।",
    "slide_type": "code"
  },
  {
    "title": "Resource Isolation का Concept",
    "content": "### क्यों ज़रूरी है Isolation?\n- एक ही cluster में multiple teams या projects के resources को अलग-अलग रखना ज़रूरी होता है।\n- `Namespace` से resource conflict कम होता है और security भी बढ़ती है।\n- उदाहरण: `team-a` और `team-b` दोनों `nginx` नाम से pod बना सकते हैं अपने-अपने namespaces में।\n- इससे debugging और monitoring भी आसान हो जाता है।",
    "slide_type": "text"
  },
  {
    "title": "Resource Access Namespace के साथ",
    "content": "```bash\nkubectl get pods --namespace=dev-environment\nkubectl create deployment nginx --image=nginx --namespace=dev-environment\n```\n- आप specific namespace में resource access या create करने के लिए `--namespace` flag का उपयोग करते हैं।\n- इससे यह सुनिश्चित होता है कि आपका काम सही environment में हो रहा है।",
    "slide_type": "code"
  },
  {
    "title": "Default Namespace का Role",
    "content": "### Default Namespace:\n- जब कोई user `--namespace` flag specify नहीं करता, तो Kubernetes by default `default` namespace का उपयोग करता है।\n- इससे beginners के लिए काम करना आसान हो जाता है, लेकिन production में namespace specify करना अच्छा practice होता है।\n- Example:\n```bash\nkubectl get pods\n```\n- उपरोक्त command implicit रूप से default namespace से pods लाएगी।",
    "slide_type": "text"
  },
  {
    "title": "Namespaces List और Context Switch",
    "content": "```bash\nkubectl get namespaces\nkubectl config set-context --current --namespace=dev-environment\nkubectl config view --minify | grep namespace\n```\n- `kubectl get namespaces` से सभी namespaces की सूची मिलती है।\n- `set-context` से आप kubectl की current working namespace बदल सकते हैं ताकि हर बार `--namespace` flag न देना पड़े।\n- `minify` और `grep` का उपयोग current namespace को verify करने के लिए किया जाता है।",
    "slide_type": "code"
  },
  {
    "title": "Quick Challenge: Test Your Understanding",
    "content": "### नीचे दिए गए प्रश्नों के उत्तर दीजिए:\n\n**Q1.** `Namespace` का मुख्य उपयोग क्या है?\n- A) Logs collect करने के लिए  \n- B) Cluster में isolation create करने के लिए  \n- C) Load balancing के लिए  \n- D) Docker images build करने के लिए\n\n**Q2.** `default` namespace किस स्थिति में use होता है?\n- A) जब आप pod create कर रहे हैं with `--namespace`  \n- B) जब आप explicitly `namespace` नहीं देते  \n- C) जब cluster restart होता है  \n- D) जब pod crash हो जाता है\n\n**Q3.** नीचे दिए गए YAML का output क्या होगा?\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: test-env\n```\n- A) Pod create होगा  \n- B) Deployment बनेगा  \n- C) Namespace create होगा  \n- D) Error आएगा\n\n**Q4.** Namespace switch करने के लिए कौन सा command सही है?\n- A) `kubectl config use-context`  \n- B) `kubectl get context`  \n- C) `kubectl config set-context --current --namespace=dev`  \n- D) `kubectl switch ns`",
    "slide_type": "text"
  },
  {
    "title": "Solutions: Quick Challenge",
    "content": "### उत्तर:\n\n**Q1 Answer:** B\n> `Namespace` का उपयोग isolation के लिए किया जाता है ताकि अलग-अलग projects के resources अलग-अलग environments में रहें।\n\n**Q2 Answer:** B\n> जब आप कोई namespace explicitly नहीं देते, तो Kubernetes `default` namespace का उपयोग करता है।\n\n**Q3 Answer:** C\n> इस YAML के द्वारा एक नया Namespace `test-env` create होगा।\n\n**Q4 Answer:** C\n> यह command current context के अंदर namespace switch करने के लिए सही है। इससे बार-बार `--namespace` देने की ज़रूरत नहीं होती।",
    "slide_type": "code"
  }
]
