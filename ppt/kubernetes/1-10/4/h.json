[
    {
      "title": "Kubernetes में Node का परिचय",
      "content": "**Node** Kubernetes क्लस्टर की सबसे बुनियादी यूनिट है। यह या तो एक वर्चुअल मशीन (VM) या एक फिजिकल सर्वर हो सकता है, जिस पर कंटेनराइज्ड एप्लिकेशन चलते हैं। हर node पर वो सभी सर्विसेज़ होती हैं जो Pods को चलाने के लिए जरूरी होती हैं, जैसे कि container runtime, kubelet, और kube-proxy। Kubernetes इन nodes की मदद से एप्लिकेशन वर्कलोड को डिस्ट्रिब्यूट और मैनेज करता है ताकि सिस्टम कुशलता से काम कर सके।",
      "slide_type": "text"
    },
    {
      "title": "Kubernetes में Node के प्रकार",
      "content": "Kubernetes में nodes को मुख्यतः दो प्रकारों में बाँटा जाता है:\n\n- **Master Node**: यह पूरा क्लस्टर मैनेज करता है और कंटेनर्स की scheduling और deployment को ऑर्केस्ट्रेट करता है। इसमें Control Plane के मुख्य कंपोनेंट्स होते हैं जैसे API server, scheduler, और controller manager।\n\n- **Worker Node**: ये वो मशीनें होती हैं जहाँ पर एप्लिकेशन वर्कलोड (Pods के रूप में) रन होते हैं। Master Node इन Workers को मैनेज करता है और ये Nodes अपनी स्थिति को लगातार रिपोर्ट करते रहते हैं ताकि क्लस्टर में शामिल रह सकें।\n\nइस विभाजन से Kubernetes हाई अवेलेबिलिटी और स्केलेबिलिटी को बनाए रखता है।",
      "slide_type": "text"
    },
    {
      "title": "Node के प्रमुख घटक",
      "content": "हर node में कुछ अहम कंपोनेंट्स होते हैं जो इसे Kubernetes क्लस्टर में फंक्शनल बनाते हैं:\n\n- **kubelet**: यह हर node पर चलने वाला एजेंट होता है जो यह सुनिश्चित करता है कि सभी कंटेनर्स ठीक से चल रहे हैं। यह Control Plane से इंस्ट्रक्शंस प्राप्त करता है।\n- **kube-proxy**: यह क्लस्टर के अंदर सर्विसेज़ के बीच नेटवर्क ट्रैफिक को रूट और फॉरवर्ड करता है। यह NAT रूल्स को भी मैनेज करता है।\n- **Container Runtime**: यह कंटेनर्स को रन करने के लिए जिम्मेदार होता है। सामान्यतः उपयोग होने वाले runtime हैं containerd और Docker। यह ऑपरेटिंग सिस्टम से इंटरफेस करता है ताकि कंटेनर्स को स्टार्ट, स्टॉप और मैनेज किया जा सके।\n\nइन कंपोनेंट्स के साथ, node कंटेनराइज्ड एप्लिकेशन को सुरक्षित और विश्वसनीय ढंग से होस्ट कर सकता है।",
      "slide_type": "text"
    },
    {
      "title": "Node का उदाहरण (YAML विवरण)",
      "content": "apiVersion: v1\nkind: Node\nmetadata:\n  name: example-node\nspec:\n  podCIDR: 10.244.0.0/24\n  providerID: aws:///us-west-2a/i-0abcd1234efgh5678\nstatus:\n  conditions:\n    - type: Ready\n      status: \"True\"",
      "slide_type": "code"
    },
    {
      "title": "Node के Lifecycle States",
      "content": [
        {
          "State": "Ready",
          "Description": "Node स्वस्थ है और Pods को स्वीकार कर सकता है।"
        },
        {
          "State": "NotReady",
          "Description": "Node तक पहुंच नहीं है या यह अस्वस्थ है।"
        },
        {
          "State": "Unknown",
          "Description": "नेटवर्क समस्याओं के कारण Node की स्थिति ज्ञात नहीं।"
        }
      ],
      "slide_type": "table"
    },
    {
      "title": "Cluster में Nodes कैसे जोड़े जाते हैं",
      "content": "Nodes को क्लस्टर में जोड़ने के लिए आमतौर पर `kubeadm` जैसे टूल्स का उपयोग किया जाता है, जो Node को बूटस्ट्रैप करने और Secure तरीके से Control Plane से जोड़ने की सुविधा देता है।\n\nउदाहरण के लिए, एक नया worker node `kubeadm join` कमांड की मदद से क्लस्टर में जुड़ सकता है, जिसमें एक token और master node का एड्रेस शामिल होता है। Cloud-native environments में, nodes को auto-scaling और Infrastructure-as-Code टूल्स से डायनामिक रूप से provision किया जा सकता है।\n\nएक बार node जुड़ जाने पर, Control Plane उस पर pods को शेड्यूल करता है, यह देखकर कि कितने resources उपलब्ध हैं, कौन से tolerations हैं, और क्या affinity rules लागू होते हैं।",
      "slide_type": "text"
    },
    {
      "title": "CLI द्वारा Nodes की जाँच",
      "content": "```bash\n# सभी Nodes की सूची प्राप्त करें\nkubectl get nodes\n\n# किसी विशेष Node की विस्तृत जानकारी प्राप्त करें\nkubectl describe node <node-name>\n```",
      "slide_type": "code"
    },
    {
      "title": "Nodes पर Taints और Tolerations",
      "content": "**Taints** और **Tolerations** ऐसे मैकेनिज़्म हैं जो Kubernetes में यह नियंत्रित करते हैं कि कौन से Pods किस Node पर रन हो सकते हैं। इससे यह सुनिश्चित किया जाता है कि विशेष प्रकार के वर्कलोड केवल उपयुक्त हार्डवेयर पर ही चलें।\n\n- **Taints** nodes पर लगाए जाते हैं और उन pods को हटा देते हैं जो उन्हें tolerate नहीं करते।\n- **Tolerations** pods पर लगाए जाते हैं ताकि वे उन nodes पर चल सकें जिन पर समान taints लागू हैं।\n\nयह फीचर उपयोगी होता है:\n- हाई-परफॉर्मेंस वर्कलोड्स को डेडिकेटेड हार्डवेयर पर चलाने के लिए।\n- कुछ एप्लिकेशन्स को compliance या security कारणों से isolate करने के लिए।\n- महत्वपूर्ण एप्लिकेशन्स को resource contention से बचाने के लिए।",
      "slide_type": "text"
    },
    {
      "title": "निष्कर्ष",
      "content": "सारांश में, **Nodes Kubernetes क्लस्टर के execution units होते हैं**। ये सभी जरूरी कंपोनेंट्स को होस्ट करते हैं जो कंटेनराइज्ड एप्लिकेशन चलाने के लिए जरूरी हैं। चाहे आप क्लाउड में हों, किसी डेटा सेंटर में हों या ऑन-प्रिमाइसेस इन्फ्रास्ट्रक्चर में, nodes की समझ होना scalability, performance और reliability को बनाए रखने के लिए ज़रूरी है।\n\nNode management को अच्छे से समझकर DevOps टीमें infrastructure का बेहतरीन उपयोग कर सकती हैं और cloud-native applications के लिए एक stable व secure वातावरण सुनिश्चित कर सकती हैं।",
      "slide_type": "text"
    }
  ]
  