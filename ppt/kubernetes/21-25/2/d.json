[
    {
      "title": "Introduction to ReplicaSet vs ReplicationController",
      "content": "Kubernetes provides tools to manage multiple pod replicas. Two such tools are **ReplicationController** and **ReplicaSet**. Understanding their differences helps in choosing the right tool for maintaining high availability and scalability.",
      "slide_type": "text"
    },
    {
      "title": "What is a ReplicationController?",
      "content": "**ReplicationController (RC)** ensures that a specified number of pod replicas are running at any given time.\n\n- Introduced in earlier versions of Kubernetes\n- Automatically replaces failed pods\n- Basic label selector (equality-based)\n- Deprecated in favor of ReplicaSet",
      "slide_type": "text"
    },
    {
      "title": "What is a ReplicaSet?",
      "content": "**ReplicaSet (RS)** is the next-generation controller that manages pod replicas like RC, but with added capabilities.\n\n- Supports **set-based label selectors**\n- Offers better integration with **Deployments**\n- Still ensures desired number of pods are running\n- More flexible and feature-rich",
      "slide_type": "text"
    },
    {
      "title": "Core Differences Between ReplicaSet and ReplicationController",
      "content": [
        {
          "Feature": "Selector Type",
          "ReplicationController": "Equality-based only",
          "ReplicaSet": "Supports set-based selectors"
        },
        {
          "Feature": "Integration with Deployments",
          "ReplicationController": "Not supported",
          "ReplicaSet": "Fully supported"
        },
        {
          "Feature": "Usage Recommendation",
          "ReplicationController": "Deprecated â€“ legacy support",
          "ReplicaSet": "Recommended for modern use"
        },
        {
          "Feature": "Creation Syntax",
          "ReplicationController": "Older API structure",
          "ReplicaSet": "Modern API, used under Deployments"
        }
      ],
      "slide_type": "table"
    },
    {
      "title": "Code Example: ReplicationController",
      "content": "```yaml\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: nginx-rc\nspec:\n  replicas: 3\n  selector:\n    app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n```",
      "slide_type": "code"
    },
    {
      "title": "Code Example: ReplicaSet",
      "content": "```yaml\napiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: nginx-rs\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n```",
      "slide_type": "code"
    },
    {
      "title": "Why Use ReplicaSet Over ReplicationController?",
      "content": "- **Enhanced label selectors** allow for more flexible pod management\n- Better support for rolling updates when used with **Deployments**\n- Considered best practice in current Kubernetes versions\n- RCs are kept for **backward compatibility** only",
      "slide_type": "text"
    },
    {
      "title": "Quick Challenge: Test Your Understanding",
      "content": "1. **Which controller supports set-based selectors?**\n2. **Can ReplicaSets be used directly without Deployments?**\n3. **What happens if a pod managed by a ReplicaSet crashes?**\n4. **Is ReplicationController deprecated?**\n5. **Write one key difference between RC and RS in one line.**",
      "slide_type": "text"
    },
    {
      "title": "Solutions: Quick Challenge",
      "content": "```markdown\n1. **ReplicaSet** supports set-based selectors.\n2. Yes, but it is **recommended** to use them with **Deployments**.\n3. It will be **automatically replaced** to match the desired replica count.\n4. Yes, it is **deprecated** and replaced by ReplicaSet.\n5. *ReplicaSet uses set-based selectors, while ReplicationController only supports equality-based.*\n```",
      "slide_type": "code"
    }
  ]
  