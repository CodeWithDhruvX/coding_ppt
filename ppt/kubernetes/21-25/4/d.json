[
    {
      "title": "What is a Multi-Container Pod?",
      "content": "A **multi-container Pod** in Kubernetes is a Pod that runs more than one container. All containers in the Pod share the **same network namespace** and can communicate using `localhost`. They also share **storage volumes** defined for the Pod.",
      "slide_type": "text"
    },
    {
      "title": "Why Use Multi-Container Pods?",
      "content": "- To separate responsibilities across containers\n- To enable tight coupling (e.g., logging sidecar, data adapter)\n- To share local storage and communicate via localhost\n- Useful for patterns like **sidecar**, **adapter**, and **ambassador**",
      "slide_type": "text"
    },
    {
      "title": "Example Use Case: Logging Sidecar",
      "content": "- **App container** writes logs to a shared volume\n- **Logging sidecar** reads logs and ships to external system\n- Both containers are in the same Pod, using a shared volume",
      "slide_type": "text"
    },
    {
      "title": "Multi-Container Pod Example (YAML)",
      "content": "```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: multi-container-example\nspec:\n  containers:\n  - name: app-container\n    image: busybox\n    command: ['sh', '-c', 'echo Hello from App > /shared/log.txt && sleep 3600']\n    volumeMounts:\n    - name: shared-storage\n      mountPath: /shared\n  - name: sidecar-container\n    image: busybox\n    command: ['sh', '-c', 'tail -f /shared/log.txt']\n    volumeMounts:\n    - name: shared-storage\n      mountPath: /shared\n  volumes:\n  - name: shared-storage\n    emptyDir: {}\n```",
      "slide_type": "code"
    },
    {
      "title": "Key Features Shared in Multi-Container Pods",
      "content": [
        {
          "Feature": "Network",
          "Shared": "Yes, containers share localhost and ports"
        },
        {
          "Feature": "Storage",
          "Shared": "Yes, via volumes"
        },
        {
          "Feature": "Process Space",
          "Shared": "No, containers have separate process spaces"
        },
        {
          "Feature": "Filesystem",
          "Shared": "Only if using a shared volume"
        }
      ],
      "slide_type": "table"
    },
    {
      "title": "Multi-Container Pod Patterns",
      "content": "- **Sidecar**: Helper container (e.g., logging, proxy)\n- **Adapter**: Transforms output for other systems\n- **Ambassador**: Connects to external resources (like a proxy)\n\nEach pattern improves modularity and reusability of applications.",
      "slide_type": "text"
    },
    {
      "title": "Benefits of Multi-Container Pods",
      "content": "- Simplifies tightly coupled service communication\n- Centralized logging or monitoring\n- Efficient use of shared resources\n- Clear separation of concerns between components",
      "slide_type": "text"
    },
    {
      "title": "Quick Challenge: Test Your Understanding",
      "content": "### Answer the following questions:\n\n1. What do containers in a multi-container Pod share?\n2. Name one use case for a sidecar container.\n3. Can containers in a Pod communicate using `localhost`?\n4. What type of volume enables containers to share files?\n5. True or False: Each container in a Pod has its own IP address.",
      "slide_type": "text"
    },
    {
      "title": "Solutions: Quick Challenge",
      "content": "```markdown\n1. **They share network and storage volumes.**\n2. **A logging sidecar to ship logs to an external system.**\n3. **Yes, they share the same network namespace and can use `localhost`.**\n4. **An `emptyDir` volume or any shared volume.**\n5. **False. All containers in a Pod share the same IP address.**\n```",
      "slide_type": "code"
    }
  ]
  