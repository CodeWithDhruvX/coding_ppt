[
  {
    "title": "Introduction to Stopping Containers",
    "content": "When working with Docker, it's common to run containers for various applications or services. However, there are situations where you need to stop a running container—either to free up resources, apply changes, or shut down the service. Docker provides a convenient way to stop containers without removing them. This operation ensures that your container can be resumed later without data loss, making it a non-destructive action.",
    "slide_type": "text"
  },
  {
    "title": "Basic Stop Command",
    "content": "```bash\ndocker stop \u003ccontainer_name_or_id\u003e\n```",
    "slide_type": "code"
  },
  {
    "title": "How It Works",
    "content": "The `docker stop` command works by sending a termination signal (SIGTERM) to the main process running inside the container. This allows the process to perform any cleanup tasks, such as closing files, saving state, or gracefully shutting down services. If the container doesn't stop within a default timeout period (usually 10 seconds), Docker sends a SIGKILL signal to forcefully terminate it. This two-step process is important to prevent data corruption and ensure proper resource cleanup.",
    "slide_type": "text"
  },
  {
    "title": "Stop vs Kill",
    "content": [
      {
        "Command": "docker stop",
        "Graceful Shutdown": "Yes",
        "Signal Sent": "SIGTERM, then SIGKILL after timeout"
      },
      {
        "Command": "docker kill",
        "Graceful Shutdown": "No",
        "Signal Sent": "SIGKILL immediately"
      }
    ],
    "slide_type": "table"
  },
  {
    "title": "Custom Timeout Example",
    "content": "```bash\ndocker stop -t 5 \u003ccontainer_name_or_id\u003e\n```  \nThis sets a 5-second timeout before forcefully killing the container.",
    "slide_type": "code"
  },
  {
    "title": "Stopping All Running Containers",
    "content": "```bash\ndocker stop $(docker ps -q)\n```  \nThis command stops all running containers by passing their IDs to `docker stop`.",
    "slide_type": "code"
  },
  {
    "title": "Common Use Cases",
    "content": "Stopping a container is useful in many scenarios:\n\n- **Before maintenance:** Stop containers to apply system updates or software patches.\n- **Testing environments:** Temporarily halt containers to switch configurations or test multiple setups.\n- **Resource optimization:** Free up system resources without deleting container data.\n- **Application restart:** After updating configuration files, stopping and restarting a container ensures the changes are loaded.\n\nUsing `docker stop` keeps your container’s state and volumes intact, so it can be started again later without losing data.",
    "slide_type": "text"
  },
  {
    "title": "Recap",
    "content": "To manage your Docker containers effectively, understanding how to stop them properly is key:\n\n- `docker stop` lets you shut down containers gracefully using SIGTERM.\n- Avoid `docker kill` unless you need an immediate termination with no cleanup.\n- Use `docker stop -t` to customize the timeout duration.\n- You can also stop all running containers at once for quick shutdown.\n\nBy mastering these commands, you'll ensure smoother development workflows and more reliable containerized applications.",
    "slide_type": "text"
  }
]