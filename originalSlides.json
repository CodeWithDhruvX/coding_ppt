[
  {
    "title": "Introduction to Service Discovery",
    "content": "In Kubernetes, **service discovery** allows pods to find and communicate with each other without hardcoding IP addresses. It dynamically assigns and resolves service locations, making communication between microservices seamless.",
    "slide_type": "text"
  },
  {
    "title": "Why Service Discovery is Needed",
    "content": "- Pods in Kubernetes are ephemeral and can be restarted anytime\n- IP addresses of pods change frequently\n- Manually updating IPs is impractical\n- Service discovery ensures **reliable communication** despite these changes",
    "slide_type": "text"
  },
  {
    "title": "Kubernetes Services as Discovery Mechanism",
    "content": "Kubernetes uses **Service objects** to abstract a group of pods and provide a stable IP and DNS name. This abstraction enables **automatic service discovery**.",
    "slide_type": "text"
  },
  {
    "title": "Service Types in Kubernetes",
    "content": [
      { "Type": "ClusterIP", "Description": "Default type. Accessible only within the cluster." },
      { "Type": "NodePort", "Description": "Exposes the service on a static port on each node." },
      { "Type": "LoadBalancer", "Description": "Creates an external load balancer in supported cloud providers." },
      { "Type": "ExternalName", "Description": "Maps service to an external DNS name." }
    ],
    "slide_type": "table"
  },
  {
    "title": "DNS-Based Service Discovery",
    "content": "Kubernetes runs a **DNS pod and service** by default which watches the API server for new services and creates DNS records for them.\n\nPods can reach a service using:\n- `service-name`\n- `service-name.namespace`\n- `service-name.namespace.svc.cluster.local`",
    "slide_type": "text"
  },
  {
    "title": "How Cluster DNS Resolves Services",
    "content": "When a pod sends a request to a service name, **CoreDNS** resolves it to the ClusterIP of that service using internal DNS resolution.",
    "slide_type": "text"
  },
  {
    "title": "Example: Accessing a Service via DNS",
    "content": "```bash\ncurl http://my-service.default.svc.cluster.local\n```",
    "slide_type": "code"
  },
  {
    "title": "Environment Variable Based Discovery",
    "content": "When a pod starts, Kubernetes injects environment variables for all services available at that time.\n\nExample:\n- `MY_SERVICE_SERVICE_HOST=10.0.0.1`\n- `MY_SERVICE_SERVICE_PORT=80`",
    "slide_type": "text"
  },
  {
    "title": "Limitations of Environment Variable Discovery",
    "content": "- Works only for services existing at pod startup\n- Doesnâ€™t detect services added later\n- DNS-based discovery is preferred for dynamic environments",
    "slide_type": "text"
  },
  {
    "title": "Recap: Kubernetes Service Discovery",
    "content": "- Uses **Service** abstraction for stable endpoints\n- Relies on **DNS (CoreDNS)** for name resolution\n- **Environment variables** provide static info at startup\n- **ClusterIP** is the most used service type for internal discovery",
    "slide_type": "text"
  }
]
