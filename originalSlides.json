[
  {
    "title": "What is Staging in Git?",
    "content": "**Staging** in Git means selecting changes that you want to include in the next commit. It's like preparing a package before sending it off.\n\n- You edit files\n- You stage the changes\n- Then you commit them",
    "slide_type": "text"
  },
  {
    "title": "Git Workflow Overview",
    "content": "- **Working Directory**: Where you modify files\n- **Staging Area (Index)**: Where selected changes are prepared\n- **Repository**: Where commits are stored permanently",
    "slide_type": "text"
  },
  {
    "title": "Stage All Changes",
    "content": "```bash\ngit add .\n```",
    "slide_type": "code"
  },
  {
    "title": "Stage Specific File",
    "content": "```bash\ngit add filename.txt\n```",
    "slide_type": "code"
  },
  {
    "title": "Stage Part of a File",
    "content": "```bash\ngit add -p filename.txt\n```",
    "slide_type": "code"
  },
  {
    "title": "Check Staged vs Unstaged",
    "content": "```bash\ngit status\n```",
    "slide_type": "code"
  },
  {
    "title": "Undo Staged Changes",
    "content": "```bash\ngit reset filename.txt\n```",
    "slide_type": "code"
  },
  {
    "title": "Visual Representation",
    "content": [
      {
        "Step": "Edit File",
        "Location": "Working Directory"
      },
      {
        "Step": "Stage File",
        "Location": "Staging Area"
      },
      {
        "Step": "Commit File",
        "Location": "Git Repository"
      }
    ],
    "slide_type": "table"
  },
  {
    "title": "Why Staging is Useful",
    "content": "- Helps organize commits logically\n- Allows partial commits\n- Reduces commit noise\n- Improves code review clarity",
    "slide_type": "text"
  },
  {
    "title": "Quick Recap",
    "content": "- Use `git add` to stage changes\n- Use `git status` to review what's staged\n- Use `git reset` to unstage\n\nâœ… Staging gives you full control before committing.",
    "slide_type": "text"
  }
]
