[
  {
    "title": "Introduction to len() and cap()",
    "content": "In Go, `len()` and `cap()` are built-in functions used to inspect slices, arrays, maps, and channels. They help developers understand how much data is stored and how much space is available.",
    "slide_type": "text"
  },
  {
    "title": "What does len() do?",
    "content": "`len()` returns the number of elements currently present in:\n\n- A **slice or array**: number of actual elements.\n- A **map**: number of key-value pairs.\n- A **channel**: number of elements currently buffered.\n\nüìå It tells you how many items are there _right now_.",
    "slide_type": "text"
  },
  {
    "title": "What does cap() do?",
    "content": "`cap()` returns the total capacity ‚Äî the maximum number of elements that the slice, array, or channel can hold **without allocating more memory**.\n\nIt is mostly used with:\n\n- **Slices**: total size of the underlying array.\n- **Channels**: buffer capacity.\n\n‚ö†Ô∏è Not applicable to maps.",
    "slide_type": "text"
  },
  {
    "title": "len() and cap() with Slices",
    "content": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    nums := make([]int, 3, 5)\n    fmt.Println(\"len:\", len(nums)) // Output: 3\n    fmt.Println(\"cap:\", cap(nums)) // Output: 5\n}",
    "slide_type": "code"
  },
  {
    "title": "len() with Maps and Channels",
    "content": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    m := map[string]int{\"a\": 1, \"b\": 2}\n    fmt.Println(\"Map len:\", len(m))\n\n    ch := make(chan int, 4)\n    ch <- 1\n    ch <- 2\n    fmt.Println(\"Channel len:\", len(ch))\n    fmt.Println(\"Channel cap:\", cap(ch))\n}",
    "slide_type": "code"
  },
  {
    "title": "Difference Between len() and cap()",
    "content": [
      {
        "Property": "len()",
        "Description": "Returns the current number of elements."
      },
      {
        "Property": "cap()",
        "Description": "Returns the maximum number of elements that can be held."
      },
      {
        "Property": "Applicable To",
        "Description": "len(): slices, arrays, maps, channels | cap(): slices, arrays, channels"
      },
      {
        "Property": "Maps",
        "Description": "Only len() works; cap() is not applicable."
      },
      {
        "Property": "Purpose",
        "Description": "len() shows usage; cap() shows potential space."
      }
    ],
    "slide_type": "table"
  },
  {
    "title": "Why It Matters",
    "content": "- Helps optimize memory usage\n- Prevents unnecessary reallocations\n- Useful in performance-critical code\n- Understanding these helps write efficient Go programs",
    "slide_type": "text"
  },
  {
    "title": "Quick Recap",
    "content": "- Use **`len()`** to get the current number of elements\n- Use **`cap()`** to get the total capacity\n- Not all types support both\n- Ideal for understanding slices and channels behavior",
    "slide_type": "text"
  }
]
