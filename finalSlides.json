[
  {
    "title": "Introduction to Service Discovery",
    "content": "In Kubernetes, **service discovery** refers to the process of automatically detecting and accessing services running in the cluster. Since pods are dynamic — they can be created, destroyed, or moved between nodes — their IP addresses change frequently. Service discovery solves this challenge by providing stable endpoints (via Services) so applications can communicate reliably, even when the underlying pod IPs change.",
    "slide_type": "text"
  },
  {
    "title": "Why Service Discovery is Needed",
    "content": "Kubernetes manages containerized applications in a highly dynamic environment. Each pod gets a unique IP address, but:\n- Pods can die and restart anytime (e.g., during a crash or rolling update)\n- New pods may get new IPs\n- Manually managing these changes is error-prone and not scalable\n\nService discovery allows apps to refer to each other using stable **names or endpoints**. This makes it possible for microservices to locate and communicate with each other consistently without worrying about changing IPs.",
    "slide_type": "text"
  },
  {
    "title": "Kubernetes Services as Discovery Mechanism",
    "content": "A **Service** in Kubernetes is a logical abstraction that defines a policy to access a set of pods. It groups pods using **labels**, and routes traffic to them using a single stable IP address and DNS name. This allows clients to communicate with the service without needing to know which pod is handling the request. Even if pods change, the service endpoint remains the same — providing seamless service discovery.",
    "slide_type": "text"
  },
  {
    "title": "Service Types in Kubernetes",
    "content": [
      {
        "Description": "Default type. Accessible only within the cluster.",
        "Type": "ClusterIP"
      },
      {
        "Description": "Exposes the service on a static port on each node.",
        "Type": "NodePort"
      },
      {
        "Description": "Creates an external load balancer in supported cloud providers.",
        "Type": "LoadBalancer"
      },
      {
        "Description": "Maps service to an external DNS name.",
        "Type": "ExternalName"
      }
    ],
    "slide_type": "table"
  },
  {
    "title": "DNS-Based Service Discovery",
    "content": "Kubernetes runs a DNS service — typically **CoreDNS** — that watches for changes in services and pods. When a service is created, CoreDNS automatically assigns it a DNS name. For example, a service named `my-service` in the `default` namespace is resolvable via:\n\n- `my-service`\n- `my-service.default`\n- `my-service.default.svc.cluster.local`\n\nApplications can use these DNS names to reliably reach the service, even if the actual pod IPs behind it change. This DNS-based approach is preferred for modern microservice architectures due to its flexibility and automatic updates.",
    "slide_type": "text"
  },
  {
    "title": "How Cluster DNS Resolves Services",
    "content": "The **CoreDNS** service in the cluster listens for Kubernetes API changes and maintains DNS records for all services. When a pod tries to access `my-service`, CoreDNS resolves it to the service's **ClusterIP** (a virtual IP address). Kubernetes then performs **internal load balancing** to forward the request to one of the healthy pods selected by the service. This DNS-based resolution abstracts the complexity of managing IP addresses manually and ensures high availability.",
    "slide_type": "text"
  },
  {
    "title": "Example: Accessing a Service via DNS",
    "content": "```bash\ncurl http://my-service.default.svc.cluster.local\n```",
    "slide_type": "code"
  },
  {
    "title": "Environment Variable Based Discovery",
    "content": "When a pod starts, Kubernetes injects a set of environment variables that represent available services. These variables include the service’s IP address and port, like:\n\n- `MY_SERVICE_SERVICE_HOST=10.0.0.1`\n- `MY_SERVICE_SERVICE_PORT=80`\n\nThis allows legacy applications or simple scripts to discover and connect to services using environment variables. However, this method is static and doesn’t reflect new services added after the pod starts. It is more suitable for initial configurations or backward compatibility.",
    "slide_type": "text"
  },
  {
    "title": "Limitations of Environment Variable Discovery",
    "content": "While using environment variables is simple and lightweight, it has some key limitations:\n\n- Variables are set only **once** during pod creation\n- If a new service is added later, running pods won’t know about it\n- Changes to services won't reflect in already-running pods\n\nFor dynamic and frequently changing environments, this approach is not ideal. **DNS-based service discovery** is the recommended method as it reflects real-time changes and provides more flexibility.",
    "slide_type": "text"
  },
  {
    "title": "Recap: Kubernetes Service Discovery",
    "content": "**Kubernetes service discovery** is a critical component for building scalable and resilient microservices. Here’s what we’ve learned:\n\n- Services act as **stable access points** for groups of dynamic pods\n- **DNS (via CoreDNS)** automatically manages service names and IP resolution\n- Environment variables offer basic discovery but are static\n- Internal load balancing ensures traffic is spread across healthy pods\n\nTogether, these features help applications find and communicate with each other **reliably**, even as the infrastructure changes underneath.",
    "slide_type": "text"
  }
]