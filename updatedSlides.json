[
  {
    "title": "Example Dockerfile",
    "content": "```Dockerfile\n# Use an official Python runtime as a base image\nFROM python:3.9-slim\n\n# Set the working directory inside the container\nWORKDIR /app\n\n# Copy the current directory contents into the container\nCOPY . /app\n\n# Install any needed packages specified in requirements.txt\nRUN pip install -r requirements.txt\n\n# Define the default command to run when the container starts\nCMD ['python', 'app.py']\n```\n\n**Explanation**:\n- `FROM python:3.9-slim`: This line tells Docker to use the official Python 3.9 slim image as the base for your container. This image comes with Python installed, making it easy to run Python applications.\n- `WORKDIR /app`: This command sets the working directory inside the container to `/app`. Any subsequent instructions, like `COPY` or `RUN`, will operate in this directory.\n- `COPY . /app`: Copies the contents of the current directory (where the Dockerfile is) to the `/app` directory inside the container.\n- `RUN pip install -r requirements.txt`: This installs the Python dependencies listed in the `requirements.txt` file. The `RUN` instruction executes this command inside the container during the image build process.\n- `CMD ['python', 'app.py']`: The `CMD` instruction defines the default command to run when the container starts. Here, it tells Docker to run `app.py` using Python.\n\nThis Dockerfile defines a simple image for a Python application.",
    "slide_type": "code"
  },
  {
    "title": "Building the Docker Image",
    "content": "To build the Docker image from the Dockerfile, use the following command in the terminal:\n\n```bash\ndocker build -t my-python-app .\n```\n\n**Explanation**:\n- `docker build`: The `docker build` command is used to build a Docker image from the instructions in the Dockerfile.\n- `-t my-python-app`: The `-t` option tags the image with a name, which is `my-python-app` in this case. You can optionally add a version tag (e.g., `my-python-app:v1`).\n- `.`: The dot represents the build context, which is the current directory. This tells Docker to look for the Dockerfile and any other files needed to build the image in this directory. If your Dockerfile is in a different directory, you can specify that path instead.\n\nThis command will build the Docker image using the instructions in the Dockerfile and give it the tag `my-python-app`.",
    "slide_type": "code"
  },
  {
    "title": "Verifying the Image",
    "content": "Once the image is built, you can verify that it was created successfully by running the following command:\n\n```bash\ndocker images\n```\n\n**Explanation**:\n- `docker images`: This command lists all the images available on your local machine. It shows information like the image name, tag, ID, size, and when it was created. You should see your `my-python-app` image in the list if the build was successful.\n\nYou can also search for a specific image by running `docker images my-python-app` to see if it is listed.",
    "slide_type": "code"
  },
  {
    "title": "Running the Docker Container",
    "content": "After building the image, you can run it as a container using the following command:\n\n```bash\ndocker run -p 5000:5000 my-python-app\n```\n\n**Explanation**:\n- `docker run`: This command starts a new container from the specified image.\n- `-p 5000:5000`: The `-p` flag maps port 5000 on the host machine to port 5000 inside the container. This is useful if your application inside the container is listening on port 5000 (for example, a web application). You can access the application by visiting `http://localhost:5000` on your host machine.\n- `my-python-app`: This is the name of the image to use for creating the container. Docker will create a container based on the `my-python-app` image you built earlier.",
    "slide_type": "code"
  }
]
